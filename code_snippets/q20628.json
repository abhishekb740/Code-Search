{
    "title": "How do I declare and initialize an array in Java?",
    "description": [
        "How do I declare and initialize an array in Java?"
    ],
    "answer": [
        "You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array).",
        "For primitive types:",
        "int[] myIntArray = new int[3]; // each element of the array is initialised to 0",
        "int[] myIntArray = {1, 2, 3};",
        "int[] myIntArray = new int[]{1, 2, 3};",
        "// Since Java 8. Doc of IntStream: https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html",
        "int [] myIntArray = IntStream.range(0, 100).toArray(); // From 0 to 99",
        "int [] myIntArray = IntStream.rangeClosed(0, 100).toArray(); // From 0 to 100",
        "int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).toArray(); // The order is preserved.",
        "int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).sorted().toArray(); // Sort ",
        "For classes, for example String, it's the same:",
        "String[] myStringArray = new String[3]; // each element is initialised to null",
        "String[] myStringArray = {\"a\", \"b\", \"c\"};",
        "String[] myStringArray = new String[]{\"a\", \"b\", \"c\"};",
        "The third way of initializing is useful when you declare an array first and then initialize it, pass an array as a function argument, or return an array. The explicit type is required.",
        "String[] myStringArray;",
        "myStringArray = new String[]{\"a\", \"b\", \"c\"};"
    ]
}